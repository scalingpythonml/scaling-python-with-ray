image: $CI_REGISTRY/softformance/lab/docker-builds:19.03-compose

services:
  - docker:19-dind

variables:
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_DRIVER: overlay2
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  STACK_PREFIX: "spacebeaver"

before_script:
  - docker-compose --version
  - echo -n $CI_JOB_TOKEN | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY

stages:
  - setup
  - test
  - compile
  - build
  - deploy

setup:
  stage: setup
  script:
    - echo ${NODE_MODULES}
  only:
    - develop
    - master

test:
  stage: test
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
  script:
    - echo $(ls -a)
    - echo $(pwd)
    - docker pull $CI_REGISTRY_IMAGE:ci || true
    - docker-compose -f compose/ci.yml -p $STACK_PREFIX up -d
    - docker-compose -f compose/ci.yml -p $STACK_PREFIX exec -T -w /app app make test
    - docker-compose -f compose/ci.yml -p $STACK_PREFIX down
  only:
    - develop
    - master

compile-staging:
  stage: compile
  script:
    - docker pull $CI_REGISTRY_IMAGE:staging || true
    - docker-compose -f compose/ci.yml -p $STACK_PREFIX up -d
    - docker-compose -f compose/ci.yml -p $STACK_PREFIX down -v
  environment:
    name: staging
  only:
    - develop
  dependencies:
    - test
  artifacts:
      paths:
        - src/static/dist
      expire_in: 1 week

compile-production:
  stage: compile
  script:
    - docker pull $CI_REGISTRY_IMAGE:production || true
    - docker-compose -f compose/ci.yml -p $STACK_PREFIX up -d
    - docker-compose -f compose/ci.yml -p $STACK_PREFIX down -v
  environment:
    name: production
  only:
    - master
  dependencies:
    - test
  artifacts:
      paths:
        - src/static/dist
      expire_in: 1 week

build-staging:
  stage: build
  script:
    - docker pull $CI_REGISTRY_IMAGE:staging || true
    - docker-compose -f compose/staging.yml -p $STACK_PREFIX build app
    - docker-compose -f compose/staging.yml -p $STACK_PREFIX push app
  environment:
    name: staging
  only:
    - develop
  dependencies:
    - compile-staging

build-production:
  stage: build
  script:
    - docker pull $CI_REGISTRY_IMAGE:production || true
    - docker-compose -f compose/production.yml -p $STACK_PREFIX build app
    - docker-compose -f compose/production.yml -p $STACK_PREFIX push app
  environment:
    name: production
  only:
    - master
  dependencies:
    - compile-production

deploy-staging:
  stage: deploy
  before_script:
    - docker-compose --version
    - echo -n $CI_JOB_TOKEN | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    # https://docs.gitlab.com/ee/ci/ssh_keys/
    - 'command -v ssh-agent >/dev/null || ( apk update && apk add openssh-client )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - docker -H=ssh://root@$HOST stack deploy -c compose/staging.yml --prune --with-registry-auth $STACK_PREFIX
    - docker logout $CI_REGISTRY
  environment:
    name: staging
  only:
    - develop
  dependencies:
    - build-staging

deploy-production:
  stage: deploy
  before_script:
  - docker-compose --version
  - echo -n $CI_JOB_TOKEN | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  # https://docs.gitlab.com/ee/ci/ssh_keys/
  - 'command -v ssh-agent >/dev/null || ( apk update && apk add openssh-client )'
  - eval $(ssh-agent -s)
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - ssh-keyscan $HOST >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts
  script:
    - docker -H=ssh://root@$HOST stack deploy -c compose/production.yml --prune --with-registry-auth $STACK_PREFIX
    - docker logout $CI_REGISTRY
  environment:
      name: production
  when: manual
  only:
    - master
  dependencies:
    - build-production
