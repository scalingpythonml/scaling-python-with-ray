version: '3.8'

volumes:
  data: {}
  broker: {}
  cache: {}
  certs: {}
  outside_db: {}

networks:
  proxy:
    external: true
  external:
    external: true
  internal:
    external: true


x-update:
  &default-update
  update_config:
    parallelism: 1
    delay: 2s
    order: stop-first
    failure_action: rollback
    max_failure_ratio: 0.1
x-rollback:
  &default-rollback
  rollback_config:
    parallelism: 1
    delay: 2s
    failure_action: pause
    max_failure_ratio: 0.1
    order: stop-first
x-restart:
  &default-restart
  restart_policy:
    condition: any
    delay: 2s
    max_attempts: 5
    window: 60s
x-logging:
  &default-logging
  driver: json-file
  options:
    max-size: 500k
    max-file: 10

services:
  proxy:
    image: traefik:2.4
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - "--providers.docker=true"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      # Enable Docker Swarm mode
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.exposedByDefault=false"
      # Create an entrypoint "web" listening on port 80
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      # Create an entrypoint "websecure" listening on port 443
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.le.acme.httpChallenge=true"
      - "--certificatesresolvers.le.acme.httpChallenge.entryPoint=web"
      # Create the certificate resolver "le" for Let's Encrypt, uses the environment variable DOMAIN
      - "--certificatesresolvers.le.acme.email=tls@${DOMAIN}"
      # Store the Let's Encrypt certificates in the mounted volume
      - "--certificatesresolvers.le.acme.storage=/certs/acme.json"
      - "--log.level=DEBUG"
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
        consistency: consistent
      - type: volume
        source: certs
        target: /certs
        consistency: consistent
    deploy:
      <<: *default-update
      <<: *default-rollback
      <<: *default-restart
      mode: global
      placement:
        constraints:
          - node.role == manager
      labels:
        # Use the proxy network
        - "traefik.docker.network=proxy"
        - "traefik.http.services.proxy.loadbalancer.server.port=80"
    networks:
      - proxy
    logging:
      <<: *default-logging

  app:
    image: ${CI_REGISTRY_IMAGE}:staging
    build:
      context: ..
      dockerfile: compose/build/Dockerfile
      target: cd
      args:
        - BUILDKIT_INLINE_CACHE=1
      cache_from:
        - revolutionsystems/python:3.8.9-wee-optimized-lto
        - ${CI_REGISTRY_IMAGE}:staging
    environment:
      __ENV__: Runtime
      ENVIRONMENT: "staging"
      SECRET_KEY: ${SECRET_KEY}
      DOMAIN: ${DOMAIN}
      SSL: 'on'
      DATA_NETLOC: ${DATA_NETLOC}
      CACHE_NETLOC: ${CACHE_NETLOC}
      BROKER_NETLOC: ${BROKER_NETLOC}
      AWS_REGION: us-west-1
      AWS_S3_HOST: us-west-1.amazonaws.com
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_STORAGE_BUCKET_NAME: ${AWS_STORAGE_BUCKET_NAME}
      AWS_S3_SECURE_URLS: 'on'
      AWS_STATIC_LOCATION: static
      AWS_MEDIA_LOCATION: media
      STATIC_URL: ${STATIC_URL}
      MEDIA_URL: ${MEDIA_URL}
      OUTSIDE_DATA_NETLOC: ${OUTSIDE_DATA_NETLOC}
      STRIPE_LIVE_SECRET_KEY: ${STRIPE_LIVE_SECRET_KEY}
      STRIPE_TEST_SECRET_KEY: ${STRIPE_TEST_SECRET_KEY}
      STRIPE_LIVE_PUBLIC_KEY: ${STRIPE_LIVE_PUBLIC_KEY}
      STRIPE_TEST_PUBLIC_KEY: ${STRIPE_TEST_PUBLIC_KEY}
      DJSTRIPE_WEBHOOK_SECRET: ${DJSTRIPE_WEBHOOK_SECRET}
    depends_on:
      - data
      - broker
      - cache
      - outside_db
      - stripe
    deploy:
      <<: *default-update
      <<: *default-rollback
      <<: *default-restart
      mode: global
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.docker.lbswarm=true"
        - "traefik.docker.network=proxy"

        - "traefik.http.routers.app.entryPoints=web"
        - "traefik.http.routers.app.rule=Host(`${DOMAIN}`)"

        - "traefik.http.routers.appsecure.entryPoints=websecure"
        - "traefik.http.routers.appsecure.rule=Host(`${DOMAIN}`)"
        - "traefik.http.routers.appsecure.tls=true"
        # Use the "le" (Let's Encrypt) resolver created below
        - "traefik.http.routers.appsecure.tls.certResolver=le"
        - "traefik.http.routers.appsecure.tls.domains[0].main=${DOMAIN}"
        # Define the port inside of the Docker service to use
        - "traefik.http.services.appsecure.loadbalancer.server.port=80"
        - "traefik.http.services.appsecure.loadbalancer.server.scheme=http"
        - "traefik.http.services.appsecure.loadbalancer.passHostHeader=true"
        - "traefik.http.services.appsecure.loadbalancer.sticky=true"
    networks:
      - proxy
      - internal
      - external
    logging:
      <<: *default-logging

  data:
    image: postgres:13.3
    shm_size: 500m
    volumes:
      - data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    deploy:
      <<: *default-update
      <<: *default-rollback
      <<: *default-restart
      mode: global
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=false"
    networks:
      - internal
    logging:
      <<: *default-logging

  broker:
    image: rabbitmq:3.8-alpine
    volumes:
      - broker:/var/lib/rabbitmq
    deploy:
      <<: *default-update
      <<: *default-rollback
      <<: *default-restart
      mode: global
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=false"
    networks:
      - internal
    logging:
      <<: *default-logging

  cache:
    image: redis:6.2
    volumes:
      - cache:/data
    environment:
      MAX_MEMORY: 300mb
      MAX_MEMORY_POLICY: allkeys-lru
    deploy:
      <<: *default-update
      <<: *default-rollback
      <<: *default-restart
      mode: global
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=false"
    networks:
      - internal
    logging:
      <<: *default-logging
      
  outside_db:
    image: mysql:8.0
    restart: always
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: ${OUTSIDE_DB_PASSWORD}
      MYSQL_DATABASE: ${OUTSIDE_DB_DATABASE}
    ports:
      - '3306:3306'
    volumes:
      - outside_db:/var/lib/mysql
      - ./outside_db/sms_item_init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    deploy:
      <<: *default-update
      <<: *default-rollback
      <<: *default-restart
      mode: global
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=false"
    networks:
      - internal
    logging:
      <<: *default-logging

  stripe:
    image: stripe/stripe-cli:v1.7.4
    command: listen --forward-to http://app:80/djstripe/webhook/
    environment:
      - STRIPE_API_KEY=${STRIPE_TEST_SECRET_KEY}
      - STRIPE_DEVICE_NAME=djstripe_docker
    deploy:
      <<: *default-update
      <<: *default-rollback
      <<: *default-restart
      mode: global
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=false"
    networks:
      - internal
      - proxy
      - external
    logging:
      <<: *default-logging