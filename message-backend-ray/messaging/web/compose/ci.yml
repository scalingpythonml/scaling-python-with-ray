version: "3.8"

volumes:
  data: {}
  broker: {}
  cache: {}
  outside_db: {}

services:
  app:
    build:
      context: ..
      dockerfile: compose/build/Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
      cache_from:
        - revolutionsystems/python:3.8.9-wee-optimized-lto
        - ${CI_REGISTRY_IMAGE}:ci
      target: ci
    volumes:
      - ${CI_PROJECT_DIR}/src:/app
    shm_size: 128m
    environment:
      __ENV__: Test
      ENVIRONMENT: "testing"
      SECRET_KEY: ${SECRET_KEY}
      DOMAIN: ${DOMAIN}
      SSL: "off"
      DATA_NETLOC: postgresql://local:local@data:5420/local
      OUTSIDE_DATA_NETLOC: mysql+pymysql://root:root@outside_db:3420/test
      CACHE_NETLOC: ${CACHE_NETLOC}
      BROKER_NETLOC: ${BROKER_NETLOC}
      STATIC_URL: ${STATIC_URL}
      MEDIA_URL: ${MEDIA_URL}
      STRIPE_LIVE_SECRET_KEY: ${STRIPE_LIVE_SECRET_KEY}
      STRIPE_TEST_SECRET_KEY: ${STRIPE_TEST_SECRET_KEY}
      STRIPE_LIVE_PUBLIC_KEY: ${STRIPE_LIVE_PUBLIC_KEY}
      STRIPE_TEST_PUBLIC_KEY: ${STRIPE_TEST_PUBLIC_KEY}
      DJSTRIPE_WEBHOOK_SECRET: ${DJSTRIPE_WEBHOOK_SECRET}
    expose:
      - "8000"
    depends_on:
      - outside_db
      - stripe
      - data
      - broker
      - cache

  data:
    image: postgres:13.3
    shm_size: 500m
    volumes:
      - data:/var/lib/postgresql/data
    ports:
      - "5420:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

  broker:
    image: rabbitmq:3.8-alpine
    volumes:
      - broker:/var/lib/rabbitmq

  cache:
    image: redis:6.2
    volumes:
      - cache:/data
    environment:
      MAX_MEMORY: 300mb
      MAX_MEMORY_POLICY: allkeys-lru


  outside_db:
    image: mysql:8.0
    restart: always
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: ${OUTSIDE_DB_PASSWORD}
      MYSQL_DATABASE: ${OUTSIDE_DB_DATABASE}
    ports:
      - '3420:3306'
    volumes:
      - outside_db:/var/lib/mysql
      - ./outside_db/sms_item_init.sql:/docker-entrypoint-initdb.d/init.sql:ro
  
  stripe:
    image: stripe/stripe-cli:v1.7.4
    command: listen --forward-to http://app:80/djstripe/webhook/
    environment:
      - STRIPE_API_KEY=${STRIPE_TEST_SECRET_KEY}
      - STRIPE_DEVICE_NAME=djstripe_docker
